plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation group: 'com.querydsl', name: 'querydsl-jpa', version: '5.0.0'
    implementation group: 'com.querydsl', name: 'querydsl-apt', version: '5.0.0'
    implementation group: 'com.querydsl', name: 'querydsl-core', version: '5.0.0'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

////(3) querydsl에서 사용할 경로를 선언합니다.
//def querydslDir = "$buildDir/generated/querydsl"
//
////(4) querydsl 설정을 추가합니다. JPA 사용 여부와 사용할 경로를 지정하였습니다.
//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}
//
////(5) build시 사용할 sourceSet을 추가합니다.
//sourceSets {
//    main.java.srcDir querydslDir
//}
//
////(6) querydsl이 compileClassPath를 상속하도록 설정합니다.
//configurations {
//    querydsl.extendsFrom compileClasspath
//}
//
////(7) querydsl 컴파일시 사용할 옵션을 설정합니다.
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

// 검색기능 사용위해, Querydsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}


clean.doLast {
    delete file(querydslDir)
}

compileQuerydsl.doFirst {
    if (file(querydslDir).exists()) {
        delete(file(querydslDir))
    }
}